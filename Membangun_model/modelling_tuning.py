# -*- coding: utf-8 -*-
"""modelling_tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DWSUr0jUmMQqoz6XYezc87YP2Xial_29
"""

!pip install dagshub

!pip install mlflow

!pip install python-dotenv

import os
import json
import joblib
import mlflow
import mlflow.sklearn
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from dotenv import load_dotenv
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    accuracy_score,
    confusion_matrix,
    classification_report,
    roc_auc_score,
    f1_score
)
from imblearn.over_sampling import SMOTE


load_dotenv()
os.environ["MLFLOW_TRACKING_USERNAME"] = os.getenv("MLFLOW_TRACKING_USERNAME")
os.environ["MLFLOW_TRACKING_PASSWORD"] = os.getenv("MLFLOW_TRACKING_PASSWORD")


mlflow.set_tracking_uri("https://dagshub.com/hubbiy18/Eksperimen_SML_Febie.mlflow")
mlflow.set_experiment("Model Tuning Advanced")


os.makedirs("mlruns_artifacts", exist_ok=True)


df = pd.read_csv("diabetes_cleaned.csv")
X = df.drop("diabetes", axis=1)
y = df["diabetes"]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)
smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(X_train, y_train)


param_grid = {
    "n_estimators": [100, 150],
    "max_depth": [None, 10],
    "min_samples_split": [2, 5],
}
clf = RandomForestClassifier(random_state=42)
grid_search = GridSearchCV(clf, param_grid, cv=3, n_jobs=-1, scoring="accuracy")
grid_search.fit(X_train_res, y_train_res)
best_model = grid_search.best_estimator_


y_pred = best_model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
auc = roc_auc_score(y_test, best_model.predict_proba(X_test)[:, 1])
cm = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred, output_dict=True)


# Confusion Matrix
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
conf_matrix_path = "mlruns_artifacts/training_confusion_matrix.png"
plt.savefig(conf_matrix_path)
plt.close()

# Estimator HTML
with open("mlruns_artifacts/estimator.html", "w") as f:
    f.write(grid_search.best_estimator_.__repr__().replace("\n", "<br>"))

# Metric JSON
with open("mlruns_artifacts/metric_info.json", "w") as f:
    json.dump(report, f, indent=4)

# Save model
joblib.dump(best_model, "mlruns_artifacts/model.pkl")

# === 9. Manual Logging to MLflow ===
with mlflow.start_run():
    mlflow.log_params(grid_search.best_params_)
    mlflow.log_metric("accuracy", acc)
    mlflow.log_metric("f1_score", f1)
    mlflow.log_metric("roc_auc", auc)

    mlflow.log_artifact("mlruns_artifacts/training_confusion_matrix.png")
    mlflow.log_artifact("mlruns_artifacts/estimator.html")
    mlflow.log_artifact("mlruns_artifacts/metric_info.json")
    mlflow.log_artifact("mlruns_artifacts/model.pkl")


print(f"Selesai. Akurasi: {acc:.4f}, F1: {f1:.4f}, AUC: {auc:.4f}")